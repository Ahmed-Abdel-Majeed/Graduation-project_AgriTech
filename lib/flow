lib/
├── core/                     👈 خدمات وأدوات مشتركة
│   ├── network/             ⬅️ إعداد API Client (Dio)
│   │   ├── api_client.dart  ➤ ملف يحتوي على إعداد Dio و Retrofit
│   │   └── network_info.dart ➤ ملف يحتوي على التحقق من الاتصال بالشبكة
│   ├── error/               ⬅️ تعريف الأخطاء العامة
│   │   └── exceptions.dart ➤ تعريف الأخطاء المخصصة
│   ├── utils/               ⬅️ أدوات مساعدة عامة
│   │   └── validators.dart ➤ أدوات تحقق من البيانات
│   └── widgets/             ⬅️ Widgets عامة يعاد استخدامها
│       └── custom_button.dart ➤ زر مخصص يعاد استخدامه في أكثر من مكان
│
├── config/                  👈 إعدادات عامة للمشروع
│   ├── theme/               ⬅️ الثيمات (فاتح / غامق)
│   │   └── theme_data.dart ➤ تخصيص الثيمات
│   ├── localization/        ⬅️ دعم اللغات
│   │   └── localization.dart ➤ تخصيص إعدادات اللغة
│   └── router/              ⬅️ مسارات التنقل بين الصفحات
│       └── app_router.dart ➤ إعدادات التنقل بين الشاشات
│
├── features/                👈 كل ميزة مستقلة بذاتها
│   ├── auth/                ⬅️ ميزة تسجيل الدخول/التسجيل
│   │   ├── data/            ➤ API, Models, Repositories
│   │   │   ├── api/         ➤ ملفات للتعامل مع API (مثل Auth API)
│   │   │   │   └── auth_api.dart ➤ API خاص بالتسجيل وتسجيل الدخول
│   │   │   └── models/      ➤ تعريف البيانات (مثل User)
│   │   │       └── user_model.dart ➤ نموذج للمستخدم
│   │   ├── domain/          ➤ UseCases, Entities
│   │   │   ├── entities/    ➤ كيانات البيانات الأساسية
│   │   │   │   └── user_entity.dart ➤ الكيان الخاص بالمستخدم
│   │   │   └── usecases/    ➤ عمليات الاستخدام
│   │   │       └── login_usecase.dart ➤ عملية تسجيل الدخول
│   │   └── presentation/    ➤ UI, Pages, Cubit
│   │       ├── cubit/       ➤ حالات الـ Cubit
│   │       │   └── auth_cubit.dart ➤ Cubit الخاص بتسجيل الدخول
│   │       └── pages/       ➤ صفحات واجهة المستخدم
│   │           └── login_page.dart ➤ صفحة تسجيل الدخول
│   ├── profile/             ➤ ميزة ملف المستخدم
│   ├── home/                ➤ ميزة الصفحة الرئيسية
│   └── settings/            ➤ ميزة الإعدادات
│
├── shared/                  👈 أشياء مشتركة بين الميزات
│   ├── constants/           ➤ الثوابت المستخدمة في المشروع
│   ├── styles/              ➤ إعدادات الأنماط (مثل الألوان والخطوط)
│   └── extensions/          ➤ إضافة بعض الوظائف المساعدة
│       └── string_extensions.dart ➤ ملحقات للسلاسل النصية
└── main.dart                👈 نقطة بدء التطبيق
شرح الهيكل:
core/network:

api_client.dart: هنا تضع إعدادات Dio أو Retrofit (Dio) لإعداد الـ API Client وتحديد الـ base URL.

network_info.dart: تتأكد من وجود اتصال بالإنترنت قبل إجراء أي طلبات.

core/error:

exceptions.dart: يحتوي على تعريفات للأخطاء الخاصة بالمشروع مثل (ServerException, CacheException).

config/theme:

theme_data.dart: يحتوي على الثيمات التي تستخدمها في المشروع (فاتح/غامق).

features/auth/data:

api/auth_api.dart: يحتوي على واجهات الـ API الخاصة بتسجيل الدخول والتسجيل باستخدام Retrofit أو Dio.

models/user_model.dart: يحتوي على تعريف نموذج المستخدم الذي يتم إرساله واستلامه من الـ API.

features/auth/domain:

entities/user_entity.dart: يحتوي على كائنات البيانات مثل User، ويمكنك استخدامه في الـ usecases.

usecases/login_usecase.dart: يحتوي على المنطق الخاص بتسجيل الدخول، مثل التحقق من صحة البيانات.

features/auth/presentation:

cubit/auth_cubit.dart: يستخدم Cubit لإدارة حالة الـ UI مثل التحقق من حالة تسجيل الدخول.

pages/login_page.dart: واجهة المستخدم لصفحة تسجيل الدخول.

shared/constants:

يحتوي على الثوابت مثل API Key أو مسارات URLs ثابتة.

shared/styles:

يحتوي على أنماط أو خصائص مرجعية مثل الألوان، الأحجام، والخطوط.

متى تستخدم هذا الهيكل:
للمشاريع المتوسطة والكبيرة: هذا الهيكل سهل التوسيع وقابل لإضافة ميزات جديدة دون التأثير على وظائف الميزات الحالية.

استخدام Injection: يمكن تكامل الـ Dependency Injection (DI) مثل get_it أو riverpod بسهولة في هذا الهيكل.

Cubit/Bloc: يمكنك استبدال Cubit بـ Bloc إذا كنت تحتاج إلى إدارة حالة أكثر تعقيدًا.

خلاصة:
هذا الهيكل يعتمد على Clean Architecture و Feature-First structure.

يمكنك تخصيصه حسب احتياجات المشروع (مثلاً إضافة ميزات جديدة).

يمكن دمج Retrofit مع Cubit بسهولة في هذا الهيكل باستخدام repo أو usecases كما تم شرحه.

لو عايز تفاصيل أكثر عن كيفية دمج Cubit و Retrofit معًا أو أي شيء آخر، أنا جاهز!


# هيكل مشروع Flutter باستخدام Clean Architecture و Feature-First Structure
# هذا الهيكل يعتمد على تقسيم المشروع إلى ميزات (features) وأقسام مشتركة (core, config, shared)
# مع استخدام Dependency Injection (DI) و Cubit لإدارة الحالة.جزء من الهيكل
# هذا الهيكل يعتمد على تقسيم المشروع إلى ميزات (features) وأقسام مشتركة (core, config, shared)
# مع استخدام Dependency Injection (DI) و Cubit لإدارة الحالة.
# هذا الهيكل يعتمد على تقسيم المشروع إلى ميزات (features) وأقسام مشتركة (core, config, shared)
# مع استخدام Dependency Injection (DI) و Cubit لإدارة الحالة.




































lib/
├── app/
│   ├── app.dart
│   ├── bootstrap.dart
│   └── firebase_options.dart
│
├── core/
;  خدمات 
utils/ 
│   ├── di/
│   │   └── injection.dart
│   ├── network/
│   │   ├── api_client.dart
│   │   └── app_interceptor.dart
│   ├── services/
│   │   └── permission_service.dart



│   └── utils/  

│       ├── date_utils.dart
│       ├── logger.dart
│       └── validators.dart
│
├── data/
│   ├── remote/
│   │   └── apis/
│   │       ├── auth_api.dart
│   │       ├── device_api.dart
│   │       └── sensor_api.dart
│   └── repositories/
│       ├── device_repository.dart
│       ├── sensor_repository.dart
│       └── user_repository.dart
│
├── domain/
│   ├── entities/
│   │   ├── base_response.dart
│   │   ├── device.dart
│   │   ├── plant.dart
│   │   ├── sensor_data.dart
│   │   ├── sensor_reading.dart
│   │   └── user_model.dart
│   └── usecases/
│       ├── device_usecase.dart
│       ├── sensor_usecase.dart
│       └── user_usecase.dart
│
├── presentation/
│   ├── auth/
│   │   ├── screens/
│   │   │   ├── login_screen.dart
│   │   │   └── register_screen.dart
│   │   └── widgets/
│   │       ├── login_form.dart
│   │       ├── login_header.dart
│   │       ├── register_form.dart
│   │       ├── register_header.dart
│   │       └── social_login_buttons.dart
│
│   ├── dashboard/
│   │   ├── screens/
│   │   │   ├── sensor_dashboard_page.dart
│   │   │   ├── plant_monitoring_page.dart
│   │   │   └── profile_page.dart
│   │   └── widgets/
│   │       ├── ai_insights_section.dart
│   │       ├── humidity_chart_widget.dart
│   │       ├── sensor_card.dart
│   │       ├── sensor_line_chart.dart
│   │       └── top_metrics_row.dart
│   ├── shared/
│   │   ├── screens/
│   │   │   ├── display_image_page.dart
│   │   │   └── image_source_selector_widget.dart
│   │   └── widgets/
│   │       ├── custom_app_bar.dart
│   │       ├── custom_button.dart
│   │       └── textfield.dart
│   ├── main/
│   │   └── screens/
│   │       └── main_screen.dart
│   └── welcome/
│       ├── screens/
│       │   ├── splash_page.dart
│       │   └── welcome.dart
│       └── widgets/
│           └── login_appbar.dart
│
├── feature/
│   ├── camera/
│   │   └── screens/
│   │       └── camera_page.dart
│   ├── chat/
│   │   └── screens/
│   │       └── chat_screen.dart
│   ├── diagnosis/
│   │   └── screens/
│   │       └── diagnosis_report_page.dart
│   ├── disease/
│   │   └── screens/
│   │       └── disease_detail_page.dart
│   └── more/
│       └── screens/
│           └── more_screen.dart
│
└── ui/
    └── widgets/
        ├── app_navigator.dart
        ├── home_screen.dart
        └── snackbar.dart
